///////////////////////////////////////////////////////////////////////////////
// Sentinel.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Sentinel.h"
#include "VersionedProjectVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CSentinel
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CSentinel
BEGIN_INTERFACE_MAP(CSentinel)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcTaskNotification, ITcTaskNotification)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CSentinel, VID_VersionedProject, CID_VersionedProjectCSentinel)
IMPLEMENT_ITCOMOBJECT(CSentinel)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CSentinel)
IMPLEMENT_ITCADI(CSentinel)
IMPLEMENT_ITCWATCHSOURCE(CSentinel)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CSentinel 
BEGIN_SETOBJPARA_MAP(CSentinel)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spTaskA)
	SETOBJPARA_ITFPTR(PID_SentinelTaskB, m_spTaskB)
	SETOBJPARA_ITFPTR(PID_SentinelTaskC, m_spTaskC)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CSentinel 
BEGIN_GETOBJPARA_MAP(CSentinel)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spTaskA)
	GETOBJPARA_ITFPTR(PID_SentinelTaskB, m_spTaskB)
	GETOBJPARA_ITFPTR(PID_SentinelTaskC, m_spTaskC)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CSentinel
BEGIN_OBJPARAWATCH_MAP(CSentinel)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CSentinel
BEGIN_OBJDATAAREA_MAP(CSentinel)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CSentinel::CSentinel()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CSentinel::~CSentinel() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CSentinel)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CSentinel::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CSentinel::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	m_spSrv->TcQuerySmartObjectInterface(m_spTaskA);
	m_spSrv->TcQuerySmartObjectInterface(m_spTaskB);
	m_spSrv->TcQuerySmartObjectInterface(m_spTaskC);


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
		m_spTaskA = NULL;
		m_spTaskB = NULL;
		m_spTaskC = NULL;
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CSentinel::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CSentinel::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CSentinel::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	return S_OK;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CSentinel::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	if (m_spTaskA != NULL) hr = FAILED(hr) ? hr : m_spTaskA->AddModule(m_spTaskA, THIS_CAST(ITcCyclic), 1);
	if (m_spTaskB != NULL) hr = FAILED(hr) ? hr : m_spTaskB->AddModule(m_spTaskB, THIS_CAST(ITcCyclic), 2);
	if (m_spTaskC != NULL) hr = FAILED(hr) ? hr : m_spTaskC->AddModule(m_spTaskC, THIS_CAST(ITcCyclic), 3);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CSentinel::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if (m_spTaskA != NULL) m_spTaskA->RemoveModule(m_spTaskA);
	if (m_spTaskB != NULL) m_spTaskB->RemoveModule(m_spTaskB);
	if (m_spTaskC != NULL) m_spTaskC->RemoveModule(m_spTaskC);

	m_spTaskA = NULL;
	m_spTaskB = NULL;
	m_spTaskC = NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


///<AutoGeneratedContent id="ImplementationOf_ITcTaskNotification">
HRESULT CSentinel::NotifyCycleTimeExceeded(ITcTask* ip, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	
	ITComObjectPtr iPtrTcCOMCallerTask;
	char objectName[50];

	if(	SUCCEEDED(ip->TcQueryInterface(IID_ITComObject, (PPVOID)&iPtrTcCOMCallerTask)) &&
		SUCCEEDED(iPtrTcCOMCallerTask->TcGetObjectName(objectName, sizeof(objectName)))	
	) {
			m_Trace.Log(tlWarning, "CycleTime Exceeded on %s", objectName);
	} else {
		m_Trace.Log(tlWarning, "CycleTime Exceeded from task context %d", context);
	}
	
	return hr;
}
///</AutoGeneratedContent>
